/*
Function Description

Complete the function minimumSwaps in the editor below. 
It must return an integer representing the minimum number of swaps to sort the array.

minimumSwaps has the following parameter(s):

arr: an unordered array of integers
*/

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    //private static int swaps = 0;

    // Complete the minimumSwaps function below.
    static int minimumSwaps(int[] arr) {
        int swaps = 0;
        for( int i = 0; i < arr.length-1; i++ ){
            while( arr[i] - (i+1) != 0 ) {
                // as long as the number in the ith spot is out of place, keep going
                for( int j = i +1; j < arr.length; j++ ) {
                    // find the correct element for the corresponding location of i
                    if( arr[j] == (i+1) ) {
                        int temp = arr[i];
                        arr[i] = arr[j];
                        arr[j] = temp;
                        swaps++;
                        break;
                    }
                }
            }
        }
        
        return swaps;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] arr = new int[n];

        String[] arrItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int arrItem = Integer.parseInt(arrItems[i]);
            arr[i] = arrItem;
        }

        int res = minimumSwaps(arr);

        bufferedWriter.write(String.valueOf(res));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
